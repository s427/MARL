function loadZipFiles(e){if(Alpine.store("files").loading)return;0===Alpine.store("files").sources.length&&resetStores(),Alpine.store("files").loading=!0;for(let o=0;o<e.length;o++){const n=e[o];zipFileAlreadyLoaded(n)||(marlConsole(`Loading file: <b>${n.name}</b>`,"info"),Alpine.store("files").loadingQueue.push(n))}startQueue()}function startQueue(){Alpine.store("files").loadingQueue.length?unzipFirstFile():endQueue()}function unzipFirstFile(){const e=Alpine.store("files").loadingQueue[0],o=e.name+e.size;if(Alpine.store("files").currentlyLoading[o]&&Alpine.store("files").currentlyLoading[o].working)return!1;Alpine.store("files").currentlyLoading[o]={error:!1,working:!0,actor:!1,outbox:!1,likes:!1,bookmarks:!1,avatar:!1,header:!1},Alpine.store("files").currentlyLoadingId=o,Alpine.store("files").currentlyLoadingName=e.name,unzipStart(e)}function unzipStart(e){JSZip.loadAsync(e).then((o=>{let n=checkZipStructure(o,e.name);if(!1===n)return void abortLoading(Alpine.store("files").currentlyLoadingId,"critical file is missing in archive");!0===n?n="":n+="/";const i=Alpine.store("files").sources.length;Alpine.store("files").sources[i]={id:i,fileInfos:{id:e.name+e.size,name:e.name,size:e.size,lastModified:e.lastModified,archiveRoot:n},nbToots:0,actor:{},outbox:{},likes:[],bookmarks:[],avatar:{},header:{}},Alpine.store("files").sources[i]._raw=o.files,unpackJsonFile("actor",i),unpackJsonFile("outbox",i),unpackJsonFile("likes",i),unpackJsonFile("bookmarks",i)}),(o=>{const n=`Error loading <b>${e.name}</b>: ${o.message}`;console.error(n),marlConsole(n,"error"),abortLoading(Alpine.store("files").currentlyLoadingId,n)}))}function checkZipStructure(e,o){let n=!0,i=[];if(void 0===e.files["actor.json"]){const e=`<b>${o}</b>: File "actor.json" not found in archive root.`;i.push({txt:e,cls:"warn"}),n=!1}if(void 0===e.files["outbox.json"]){const e=`<b>${o}</b>: File "outbox.json" not found in archive root.`;i.push({txt:e,cls:"warn"}),n=!1}if(!n){let s,r;const t=e.file(/actor.json$/);t.length&&(s=t[0].name.split("/"),s.pop(),s=s.join("/"));const l=e.file(/outbox.json$/);if(l.length&&(r=l[0].name.split("/"),r.pop(),r=r.join("/")),s&&r)if(s===r){n=s;const e=`<b>${o}</b>: "outbox.json" and "actor.json" both found in the same subfolder (<b>${s}</b>). We'll assume everything else is in that folder too.`;i.push({txt:e,cls:"warn"})}else{const e=`<b>${o}</b>: incoherent structure ("actor.json" and "outbox.json" are not in the same location). Unable to load this archive.`;i.push({txt:e,cls:"error"})}else{const e=`<b>${o}</b>: missing critical files ("actor.json" and/or "outbox.json"). Unable to load this archive.`;i.push({txt:e,cls:"error"})}}return i.length&&i.forEach((e=>{console.warn(e.txt),marlConsole(e.txt,e.cls)})),n}function unpackJsonFile(e,o){const n=Alpine.store("files").sources[o]._raw,i=Alpine.store("files").sources[o].fileInfos,s=i.archiveRoot+e+".json";if(void 0===n[s]&&("likes"===e||"bookmarks"===e)){const o=`<b>${i.name}</b>: File ${e}.json not found in archive.`;return console.warn(o),marlConsole(o,"warn"),void(Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId][e]=!0)}n[s].async("text").then((function(n){let i=JSON.parse(n);loadJsonData(e,i,o)}))}function loadJsonData(e,o,n){if("actor"===e&&(Alpine.store("files").sources[n].actor=o,loadActorImages(n),Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId].actor=!0),"outbox"===e){let e=o.orderedItems.reduce(((e,o)=>{let i=preprocessToots(o,n);return i&&e.push(i),e}),[]);Alpine.store("files").toots=Alpine.store("files").toots.concat(e),Alpine.store("files").sources[n].nbToots=e.length,delete o.orderedItems,Alpine.store("files").sources[n].outbox=o,Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId].outbox=!0}"likes"!==e&&"bookmarks"!==e||(Alpine.store("files").sources[n][e]=o.orderedItems,Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId][e]=!0),unzipEnd()}function loadActorImages(e){const o=Alpine.store("files").sources[e].actor,n=Alpine.store("files").sources[e].fileInfos.archiveRoot,i=Alpine.store("files").sources[e]._raw;if(o.icon&&"Image"===o.icon.type&&o.icon.url&&i[n+o.icon.url]){const s=o.icon;i[n+s.url].async("base64").then((function(o){Alpine.store("files").sources[e].avatar={type:s.mediaType,content:o,noImg:!1},Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId].avatar=!0,unzipEnd()}))}else Alpine.store("files").sources[e].avatar={noImg:!0},Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId].avatar=!0;if(o.image&&"Image"===o.image.type&&o.image.url&&i[n+o.image.url]){const s=o.image;i[n+s.url].async("base64").then((function(o){Alpine.store("files").sources[e].header={type:s.mediaType,content:o,noImg:!1},Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId].header=!0,unzipEnd()}))}else Alpine.store("files").sources[e].header={noImg:!0},Alpine.store("files").currentlyLoading[Alpine.store("files").currentlyLoadingId].header=!0;unzipEnd()}function abortLoading(e){const o=Alpine.store("files").currentlyLoadingId;Alpine.store("files").currentlyLoading[o].error=e,unzipEnd()}function unpackingFinished(){const e=Alpine.store("files").currentlyLoadingId,o=Alpine.store("files").currentlyLoading[e];return!!(o.error||o.actor&&o.outbox&&o.likes&&o.bookmarks&&o.avatar&&o.header)}function unzipEnd(){const e=Alpine.store("files").currentlyLoadingId;unpackingFinished()&&(Alpine.store("files").currentlyLoading[e].working=!1,Alpine.store("files").loadingQueue.shift(),Alpine.store("files").currentlyLoadingId="",Alpine.store("files").currentlyLoadingName="",startQueue())}function endQueue(){Alpine.store("files").loading=!1}